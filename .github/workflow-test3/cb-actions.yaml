name: CB-CI-ACTIONS-WORKFLOW

on:
  push:
  pull_request:
  #schedule:
  # cron은 UTC 기준, 15시이면 한국시간 15+9 = 24시가 됨
  #- cron: "0 15 * * *"
  #- cron: "*/10 * * * *"

jobs:
  cb-ci-env-job:
    name: CB-CI-ENV-JOB
    runs-on: ubuntu-latest
    outputs:
      branch: ${{ steps.cev.outputs.branch }}
      author_association: ${{ steps.cev.outputs.author_association }}
      skip_lint: ${{ steps.cev.outputs.steps.cev.outputs.skip_lint }}
    steps:
      - name: Check and configure environment variable
        id: cev
        env:
          GITHUB_CONTEXT: ${{ toJSON(github) }}
        uses: actions/github-script@v4
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            (async _ => {
              const { GITHUB_CONTEXT } = process.env
              console.log('github', GITHUB_CONTEXT)
              var github = JSON.parse(GITHUB_CONTEXT)
              console.log('github.ref', github.ref)

              console.log('context', context)       

              var branch = ""
              if(context.eventName == "pull_request") branch = context.payload.pull_request.base.ref
              else if(context.eventName == "push") branch = context.ref.replace("refs/heads/", "")
              else if(context.eventName == "schedule") branch = context.ref.replace("refs/heads/", "")
              console.log('branch', branch)
              core.setOutput('branch', branch)

              var author_association = ""

              actor = ""
              owner = ""
              repoName = ""

              if(context.eventName == "schedule") {
                actor = context.actor
                owner = github.repository_owner
                repoName = github.repository.replace(actor+"/", "")
              } else {
                actor = context.actor
                owner = context.payload.repository.owner.login
                repoName = context.payload.repository.name
              }

              console.log('actor', actor)
              console.log('owner', owner)
              console.log('repoName', repoName)

              if(actor == owner) author_association = "OWNER"
              if(author_association == "") {        
                try {
                  res = await github.orgs.listMembers({org: "cloud-barista" })
                  console.log('listMembers', res)
                  if (res.status >= 200 && res.status < 300) {
                    isMember = res.data.some(({ login }) => login === actor)
                    if(isMember) author_association = "MEMBER"
                  }                  
                } catch (e) {
                  console.log(e)
                }              
              }
              if(author_association == "") {        
                try {
                  res = await github.repos.listCollaborators({
                    owner: owner,
                    repo: repoName,
                  })
                  console.log('listCollaborators', res)
                  if (res.status >= 200 && res.status < 300) {
                    isCollaborator = res.data.some(({ login }) => login === context.actor)
                    if(isCollaborator) author_association = "COLLABORATOR"
                  }                   
                } catch (e) {
                  console.log(e)
                }            
              }              
              core.setOutput('author_association', author_association)

              var skip_lint = false
              var title = ""
              if(context.eventName == "pull_request") title = context.payload.pull_request.title
              else if(context.eventName == "push") title = context.payload.head_commit.message
              else if(context.eventName == "schedule") title = ""
              if( title.includes('[skip lint]')) skip_lint = true
              console.log('title', title)
              console.log('skip_lint', skip_lint)
              core.setOutput('skip_lint', skip_lint)              

            })();

      - name: Display cev
        run: |
          echo "branch: ${{ steps.cev.outputs.branch }}"
          echo "author_association: ${{ steps.cev.outputs.author_association }}"
          echo "skip_lint: ${{ steps.cev.outputs.skip_lint }}"

  cb-ci-test-job:
    name: CB-CI-TEST-JOB
    runs-on: ubuntu-latest
    needs: [cb-ci-env-job]
    steps:
      - uses: actions/checkout@v2

      - name: Make Output Folder
        run: |
          pwd
          mkdir -p ./outputs

      - name: Setup Go
        uses: actions/setup-go@v2
        with:
          go-version: "1.13"

      - name: Setup Report Card
        run: |
          cd ../..
          pwd
          git clone https://github.com/gojp/goreportcard.git   
          cd goreportcard
          make install
          go get -u github.com/client9/misspell/cmd/misspell
          go install ./cmd/goreportcard-cli
          cd ${{ github.workspace }}
          pwd

      - name: Setup golangci-lint
        run: |
          curl -sSfL https://raw.githubusercontent.com/golangci/golangci-lint/master/install.sh | sh -s -- -b $(go env GOPATH)/bin v1.39.0
          golangci-lint --version

      - name: Find PR Number
        id: findPrNumber
        uses: actions/github-script@v3
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            var fs = require('fs');
            var prNumber = '0'

            if(context.eventName == 'pull_request') {
              prNumber = context.payload.number
            } else if(context.eventName == 'push') {
              const result = await github.repos.listPullRequestsAssociatedWithCommit({
                owner: context.repo.owner,
                repo: context.repo.repo,
                commit_sha: context.sha
              })
              const pr = result.data.length > 0 && result.data[0];
              prNumber = pr && pr.number || '0'
            }
            fs.writeFileSync('./outputs/pr_number.txt', prNumber, 'utf8');

      - name: Run Lint
        run: |
          golangci-lint run --config ./.github/.golangci.yaml --disable-all -E deadcode | tee ./outputs/deadcode-lint-result.txt
          golangci-lint run --config ./.github/.golangci.yaml --disable-all -E errcheck | tee ./outputs/errcheck-lint-result.txt
          golangci-lint run --config ./.github/.golangci.yaml --disable-all -E staticcheck | tee ./outputs/staticcheck-lint-result.txt
          golangci-lint run --config ./.github/.golangci.yaml --disable-all -E revive | tee ./outputs/revive-lint-result.txt

          if [ -f "./outputs/deadcode-lint-result.txt" ] ; then
            echo "======= deadcode-lint-result.txt ======="
            cat ./outputs/deadcode-lint-result.txt
          fi
          if [ -f "./outputs/errcheck-lint-result.txt" ] ; then
            echo "======= errcheck-lint-result.txt ======="
            cat ./outputs/errcheck-lint-result.txt
          fi
          if [ -f "./outputs/staticcheck-lint-result.txt" ] ; then
            echo "======= staticcheck-lint-result.txt ======="
            cat ./outputs/staticcheck-lint-result.txt
          fi  
          if [ -f "./outputs/revive-lint-result.txt" ] ; then
            echo "======= revive-lint-result.txt ======="
            cat ./outputs/revive-lint-result.txt
          fi

      - name: Run Report Card
        run: |
          goreportcard-cli -v -j
          goreportcard-cli -v

      - name: Run Coverage
        run: |
          (go test -v -covermode=count -coverprofile=./outputs/coverage.txt > ./outputs/coverage.err 2>&1; echo $? > ./outputs/coverage.check ) || true
          if [ -f "./outputs/coverage.check" ] ; then
            echo "======= coverage.check ======="
            cat ./outputs/coverage.check
          fi    
          if [ -f "./outputs/coverage.err" ] ; then
            echo "======= coverage.err ======="
            cat ./outputs/coverage.err
          fi   
          if [ -f "./outputs/coverage.txt" ] ; then
            echo "======= coverage.txt ======="
            cat ./outputs/coverage.txt
          fi

          (go tool cover -html=./outputs/coverage.txt -o ./outputs/coverage.html) || true
          (go tool cover -func ./outputs/coverage.txt | grep total | awk '{print $3}' > ./outputs/coverage.total) || true

      - name: Upload Result
        uses: actions/upload-artifact@v2
        with:
          name: cb-artifact
          path: outputs/

  cb-ci-build-matrix-job:
    name: CB-CI-BUILD-MATRIX-JOB
    runs-on: ubuntu-latest
    needs: [cb-ci-env-job]
    strategy:
      matrix:
        go: ["1.14", "1.13"]
    steps:
      - uses: actions/checkout@v2

      - name: Make Output Folder
        run: |
          mkdir -p ./outputs

      - name: Setup Go
        uses: actions/setup-go@v2
        with:
          go-version: ${{ matrix.go }}

      - name: Run Build
        id: build
        run: |
          (go build -o test > ./outputs/build.err 2>&1; echo $? > ./outputs/build.check ) || true
          if [ -f "./outputs/build.check" ] ; then
            echo "======= build.check ======="
            cat ./outputs/build.check
          fi    
          if [ -f "./outputs/build.err" ] ; then
            echo "======= build.err ======="
            cat ./outputs/build.err
          fi

      - name: Upload Result
        uses: actions/upload-artifact@v2
        with:
          name: cb-artifact-gobuild-${{ matrix.go }}
          path: outputs/

  cb-ci-build-result-job:
    name: CB-CI-BUILD-RESULT-JOB
    runs-on: ubuntu-latest
    needs: [cb-ci-env-job, cb-ci-build-matrix-job]
    outputs:
      go_build_check: ${{ steps.mergeresult.outputs.go_build_check }}
    steps:
      - name: Make Output Folder
        run: |
          mkdir -p ./outputs

      - uses: actions/download-artifact@v2

      - name: Display structure of downloaded files
        run: ls -R ./cb-artifact-gobuild-*

      - name: Merge Build Result
        id: mergeresult
        run: |
          buildCheck=0
          checkfiles=`find ./cb-artifact-gobuild-*/build.check`
          for eachfile in $checkfiles
          do
              check=`cat $eachfile`
              echo "$eachfile : $check"
              if [ $check != "0" ]; then
                buildCheck=1
              fi   
          done

          echo $buildCheck > ./outputs/build.check
          echo "::set-output name=go_build_check::${buildCheck}"

          errfiles=`find ./cb-artifact-gobuild-*/build.err`
          for eachfile in $errfiles
          do
              folder=$(awk -F/ '{print $2}' <<< $eachfile)
              goVersion=$(awk -F- '{print $4}' <<< $folder)

              checkFile="${eachfile//build.err/build.check}"
              check=`cat $checkFile`
              err=`cat $eachfile`

              echo "$goVersion : $eachfile : $err"

              echo $eachfile >> ./outputs/build.err
              echo "" >> ./outputs/build.err

              if [ $check == "0" ]; then
                  echo "Golang $goVersion Build Success !!!" >> ./outputs/build.err
              else
                  echo "Golang $goVersion Build Error !!!" >> ./outputs/build.err
              fi              
              echo "" >> ./outputs/build.err
              echo $err >> ./outputs/build.err
              echo "" >> ./outputs/build.err
          done

      - name: Upload Result
        uses: actions/upload-artifact@v2
        with:
          name: cb-artifact-gobuild
          path: outputs/

  cb-ci-image-build-job:
    name: CB-CI-IMAGE-BUILD-JOB
    if: ${{ github.event_name == 'push' || github.event_name == 'schedule'}}
    runs-on: ubuntu-latest
    needs: [cb-ci-env-job, cb-ci-build-result-job]
    outputs:
      docker_build_check: ${{ steps.imgbuild.outputs.docker_build_check }}
    steps:
      - uses: actions/checkout@v2

      - name: Make Output Folder
        run: |
          mkdir -p ./outputs

      - name: Image Build Test
        id: imgbuild
        run: |
          (docker build . --file Dockerfile  > ./outputs/dockerbuild.err 2>&1; echo $? > ./outputs/dockerbuild.check ) || true
          if [ -f "./outputs/dockerbuild.check" ] ; then
            echo "======= dockerbuild.check ======="
            cat ./outputs/dockerbuild.check
          fi    
          if [ -f "./outputs/dockerbuild.err" ] ; then
            echo "======= dockerbuild.err ======="
            cat ./outputs/dockerbuild.err
          fi

          dockerBuildCheck=`cat ./outputs/dockerbuild.check`
          echo "::set-output name=docker_build_check::${dockerBuildCheck}"

      - name: Upload Result
        uses: actions/upload-artifact@v2
        with:
          name: cb-artifact-image-build
          path: outputs/

  cb-ci-image-deploy-job:
    name: CB-CI-IMAGE-DEPLOY-JOB
    if: ${{ (github.event_name == 'push' || github.event_name == 'schedule') && needs.cb-ci-build-result-job.outputs.go_build_check == 0 && needs.cb-ci-image-build-job.outputs.docker_build_check == 0}}
    runs-on: ubuntu-latest
    needs: [cb-ci-env-job, cb-ci-build-result-job, cb-ci-image-build-job]
    env:
      DOCKER_REPO: jmleefree
      IMAGE_NAME: actiontest1
    steps:
      - uses: actions/checkout@v2

      - name: Make Output Folder
        run: |
          mkdir -p ./outputs

      - name: Prepare Tags
        id: prep
        run: |
          VERSION=latest
          if [[ $GITHUB_REF == refs/tags/* ]]; then
            VERSION=${GITHUB_REF#refs/tags/v}
          fi

          DOCKER_IMAGE=$DOCKER_REPO/$IMAGE_NAME
          DOCKER_TAGS="${DOCKER_IMAGE}:${VERSION}"
          if [[ $VERSION =~ ^v[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}.*$ ]]; then
            DOCKER_TAGS="$DOCKER_TAGS,${DOCKER_IMAGE}:latest"
          fi
          echo ::set-output name=docker-image::${DOCKER_IMAGE}
          echo ${DOCKER_IMAGE}
          echo ::set-output name=docker-tags::${DOCKER_TAGS}
          echo ${DOCKER_TAGS}
          GHCR_IMAGE=ghcr.io/${{ github.repository_owner }}/$IMAGE_NAME
          GHCR_TAGS="${GHCR_IMAGE}:${VERSION}"
          if [[ $VERSION =~ ^v[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}.*$ ]]; then
            GHCR_TAGS="$GHCR_TAGS,${GHCR_IMAGE}:latest"
          fi
          echo ::set-output name=ghcr-image::${GHCR_IMAGE}
          echo ${GHCR_IMAGE}          
          echo ::set-output name=ghcr-tags::${GHCR_TAGS}
          echo ${GHCR_TAGS}

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v1
        with:
          platforms: all

      - name: Set up Docker Buildx
        id: buildx
        uses: docker/setup-buildx-action@v1

      - name: Cache Docker layers
        uses: actions/cache@v2.1.4
        with:
          path: /tmp/.buildx-cache
          key: ${{ runner.os }}-buildx-${{ github.sha }}
          restore-keys: |
            ${{ runner.os }}-buildx-

      #- name: Login to Docker Hub
      #  uses: docker/login-action@v1
      #  with:
      #    username: ${{ secrets.DOCKER_USERNAME }}
      #    password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Login to GitHub Container Registry
        uses: docker/login-action@v1
        with:
          registry: ghcr.io
          username: ${{ github.repository_owner }}
          password: ${{ secrets.CR_PAT }}

      - name: Build and publish
        id: imgpublish
        uses: docker/build-push-action@v2
        with:
          builder: ${{ steps.buildx.outputs.name }}
          context: ./
          file: ./Dockerfile
          platforms: linux/amd64 # linux/arm/v7,linux/arm64,linux/386,linux/ppc64le,linux/s390x,linux/arm/v6
          push: true
          tags: |
            ${{ steps.prep.outputs.ghcr-tags }}
          cache-from: type=local,src=/tmp/.buildx-cache
          cache-to: type=local,dest=/tmp/.buildx-cache

      - name: Publish Image Check
        id: imgcheck
        run: |
          (docker pull ${{ steps.prep.outputs.ghcr-tags }}@${{ steps.imgpublish.outputs.digest }} > ./outputs/ghcrpublish.err 2>&1; echo $? > ./outputs/ghcrpublish.check ) || true
          if [ -f "./outputs/ghcrpublish.check" ] ; then
            echo "======= ghcrpublish.check ======="
            cat ./outputs/ghcrpublish.check
          fi    
          if [ -f "./outputs/ghcrpublish.err" ] ; then
            echo "======= ghcrpublish.err ======="
            cat ./outputs/ghcrpublish.err
          fi

          ghcrPublishCheck=`cat ./outputs/ghcrpublish.check`
          echo "::set-output name=ghcr_publish_check::${ghcrPublishCheck}"

          docker rmi $(docker images -f "dangling=true" -q)
          docker images
                  
          (docker pull ${{ steps.prep.outputs.docker-tags }}@${{ steps.imgpublish.outputs.digest }} > ./outputs/dockerpublish.err 2>&1; echo $? > ./outputs/dockerpublish.check ) || true
          if [ -f "./outputs/dockerpublish.check" ] ; then
            echo "======= dockerpublish.check ======="
            cat ./outputs/dockerpublish.check
          fi    
          if [ -f "./outputs/dockerpublish.err" ] ; then
            echo "======= dockerpublish.err ======="
            cat ./outputs/dockerpublish.err
          fi

          dockerPublishCheck=`cat ./outputs/dockerpublish.check`
          echo "::set-output name=docker_publish_check::${dockerPublishCheck}"

      - name: Upload Result
        uses: actions/upload-artifact@v2
        with:
          name: cb-artifact-image-deploy
          path: outputs/
