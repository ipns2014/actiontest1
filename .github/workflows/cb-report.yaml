name: CB-CI-REPORTS-WORKFLOW

on:
  workflow_run:
    workflows: ["CB-CI-ACTIONS-WORKFLOW"]
    types:
      - completed

jobs:
  cb-ci-reports-job:
    name: CB-CI-REPORTS-JOB
    runs-on: ubuntu-latest
    if: ${{ github.event.workflow_run.conclusion == 'success' }}
    steps:
      - name: Check Environment variable
        env:
          GITHUB_CONTEXT: ${{ toJSON(github) }}
          SECRETS: ${{ toJSON(secrets) }}
        run: |
          echo "workflow starting..."

      - name: Checkout
        uses: actions/checkout@v2
        with:
          ref: ${{ github.event.workflow_run.head_commit.id }}

      - name: Download cb-actions-artifact
        uses: dawidd6/action-download-artifact@v2
        with:
          github_token: ${{secrets.GITHUB_TOKEN}}
          workflow: cb-actions.yaml
          workflow_conclusion: success
          name: cb-actions-artifact

      - name: Display structure of downloaded files
        run: ls -R

      - name: Load Result Info
        id: loadResultInfo
        uses: actions/github-script@v3
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            var fs = require('fs');

            var prNumber = 0
            if (fs.existsSync('./pr_number.txt')) {
              prNumber = Number(fs.readFileSync('./pr_number.txt', 'utf8'))
            }
            console.log('prNumber', prNumber)
            core.setOutput('prNumber', prNumber)

            var unitTestCheck = 0
            if (fs.existsSync('./unit-test.check')) {
              unitTestCheck = Number(fs.readFileSync('./unit-test.check', 'utf8'))
            }
            console.log('unitTestCheck', unitTestCheck)   
            core.setOutput('unitTestCheck', unitTestCheck)   

            var unitTestErr = ''
            if (fs.existsSync('./unit-test.err')) {
              unitTestErr = fs.readFileSync('./unit-test.err', 'utf8')
            }
            console.log('unitTestErr', unitTestErr)   
            core.setOutput('unitTestErr', unitTestErr)

            if(unitTestCheck != 0) {
              var report = {}
              report.summary = "Unit Test Error Raised !!!"
              report.text_description = unitTestErr
              core.setOutput('unitTestErrReport', JSON.stringify(report))     
            }               

            var unitTestXml = ''
            if (fs.existsSync('./unit-tests.xml')) {
              unitTestXml = fs.readFileSync('./unit-tests.xml', 'utf8')
            }
            console.log('unitTestXml', unitTestXml)  
            core.setOutput('unitTestXml', unitTestXml)  

            var coverageCheck = 0
            if (fs.existsSync('./coverage.check')) {
              coverageCheck = Number(fs.readFileSync('./coverage.check', 'utf8'))
            }
            console.log('coverageCheck', coverageCheck)  
            core.setOutput('coverageCheck', coverageCheck)   

            var coverageErr = ''
            if (fs.existsSync('./coverage.err')) {
              coverageErr = fs.readFileSync('./coverage.err', 'utf8')
            }
            console.log('coverageErr', coverageErr) 
            core.setOutput('coverageErr', coverageErr)    

            if(coverageCheck != 0) {
              var report = {}
              report.summary = "Coverage Error Raised !!!"
              report.text_description = coverageErr
              core.setOutput('coverageErrReport', JSON.stringify(report))     
            } else {
              var report = {}
              report.summary = "You can check detailed code coverage by clicking on the badge icon to access the codecov site."
              report.text_description = "[![codecov](https://codecov.io/gh/${{ github.repository }}/branch/${{ github.event.repository.default_branch }}/graph/badge.svg)](https://codecov.io/gh/${{ github.repository }})"
              core.setOutput('coverageSuccessReport', JSON.stringify(report))
            }                   

            var coverageTxt = ''
            if (fs.existsSync('./coverage.txt')) {
              coverageTxt = fs.readFileSync('./coverage.txt', 'utf8')
            }
            console.log('coverageTxt', coverageTxt) 
            core.setOutput('coverageTxt', coverageTxt)    

            var buildCheck = 0
            if (fs.existsSync('./build.check')) {
              buildCheck = Number(fs.readFileSync('./build.check', 'utf8'))
            }
            console.log('buildCheck', buildCheck)   
            core.setOutput('buildCheck', buildCheck)   

            var buildErr = ''
            if (fs.existsSync('./build.err')) {
              buildErr = fs.readFileSync('./build.err', 'utf8')
            }
            console.log('buildErr', buildErr)   
            core.setOutput('buildErr', buildErr)

            if(buildCheck != 0) {
              var report = {}
              report.summary = "Build Error Raised !!!"
              report.text_description = buildErr
              core.setOutput('buildErrReport', JSON.stringify(report))     
            } else {
              var report = {}
              report.summary = "Build Success !!!"
              report.text_description = ''
              core.setOutput('buildSuccessReport', JSON.stringify(report))                
            }

      - name: Publish Unit Test Results(Success)
        if: ${{ steps.loadResultInfo.outputs.unitTestCheck == 0 }}
        uses: EnricoMi/publish-unit-test-result-action@v1
        with:
          commit: ${{ github.event.workflow_run.head_commit.id }}
          files: unit-tests.xml

      - name: Publish Unit Test Results(Fail)
        if: ${{ steps.loadResultInfo.outputs.unitTestCheck != 0 }}
        uses: LouisBrunner/checks-action@v1.1.1
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          sha: ${{ github.event.workflow_run.head_commit.id }}
          name: Publish Unit Test Results(Fail)
          conclusion: false
          output: |
            ${{ steps.loadResultInfo.outputs.unitTestErrReport }}

      - name: Upload coverage report(Success)
        if: ${{ steps.loadResultInfo.outputs.coverageCheck == 0 }}
        uses: codecov/codecov-action@v1.3.1
        with:
          token: ${{ secrets.CODECOV_TOKEN }}
          file: coverage.txt
          flags: unittests
          name: codecov-umbrella
          override_commit: ${{ github.event.workflow_run.head_commit.id }}

      - name: Publish Coverage Results(Success)
        if: ${{ steps.loadResultInfo.outputs.coverageCheck == 0 }}
        uses: LouisBrunner/checks-action@v1.1.1
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          sha: ${{ github.event.workflow_run.head_commit.id }}
          name: Publish Coverage Results(Success)
          conclusion: true
          output: |
            ${{ steps.coverageResult.outputs.coverageSuccessReport }}

      - name: Publish Coverage Results(Fail)
        if: ${{ steps.loadResultInfo.outputs.coverageCheck != 0 }}
        uses: LouisBrunner/checks-action@v1.1.1
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          sha: ${{ github.event.workflow_run.head_commit.id }}
          name: Publish Coverage Results(Fail)
          conclusion: false
          output: |
            ${{ steps.coverageResult.outputs.coverageErrReport }}

      - name: Publish Build Results(Success)
        if: ${{ steps.loadResultInfo.outputs.buildCheck == 0 }}
        uses: LouisBrunner/checks-action@v1.1.1
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          sha: ${{ github.event.workflow_run.head_commit.id }}
          name: Publish Build Results(Success)
          conclusion: true
          output: |
            ${{ steps.coverageResult.outputs.buildSuccessReport }}

      - name: Publish Build Results(Fail)
        if: ${{ steps.loadResultInfo.outputs.buildCheck != 0 }}
        uses: LouisBrunner/checks-action@v1.1.1
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          sha: ${{ github.event.workflow_run.head_commit.id }}
          name: Publish Build Results(Fail)
          conclusion: false
          output: |
            ${{ steps.coverageResult.outputs.buildErrReport }}

      - name: PR Comment
        if: ${{ github.event.workflow_run.event == 'pull_request' }}
        uses: actions/github-script@v3
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            var fs = require('fs');
            var issue_number = Number(fs.readFileSync('./pr_number.txt'));
            await github.issues.createComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: issue_number,
              body: 'Everything is OK. Thank you for the PR!' + context.eventName
            });

      - name: Create Commit Comment
        if: ${{ github.event.workflow_run.event == 'push' }}
        uses: peter-evans/commit-comment@v1
        with:
          body: |
            This is a multi-line test comment
            - With GitHub **Markdown** :sparkles:
            - Created by [commit-comment][1]

            [1]: https://github.com/peter-evans/commit-comment
