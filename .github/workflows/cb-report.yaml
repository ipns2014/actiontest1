name: CB-CI-REPORTS-WORKFLOW

on:
  workflow_run:
    workflows: ["CB-CI-ACTIONS-WORKFLOW"]
    types:
      - completed

jobs:
  cb-ci-reports-job:
    name: CB-CI-REPORTS-JOB
    runs-on: ubuntu-latest
    if: ${{ github.event.workflow_run.conclusion == 'success' }}
    steps:
      - name: Check Environment variable
        env:
          GITHUB_CONTEXT: ${{ toJSON(github) }}
          SECRETS: ${{ toJSON(secrets) }}
        run: |
          echo "workflow starting..."

      - name: Checkout
        uses: actions/checkout@v2
        with:
          ref: ${{ github.event.workflow_run.head_commit.id }}

      - name: Download cb-actions-artifact
        uses: dawidd6/action-download-artifact@v2
        with:
          github_token: ${{secrets.GITHUB_TOKEN}}
          workflow: cb-actions.yaml
          workflow_conclusion: success

      - name: Make Publish Folder
        run: |
          mkdir -p ./cb-publish

      - name: Display structure of downloaded files
        run: ls -R ./cb-*

      - name: Load Result Info
        id: loadResultInfo
        uses: actions/github-script@v3
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            var fs = require('fs');

            var prNumber = 0
            if (fs.existsSync('./cb-artifact/pr_number.txt')) {
              prNumber = Number(fs.readFileSync('./cb-artifact/pr_number.txt', 'utf8'))
            }
            console.log('prNumber', prNumber)
            core.setOutput('prNumber', prNumber)

            var deadcodeLintResultXml = ''
            if (fs.existsSync('./cb-artifact/deadcode-lint-result.xml')) {
              deadcodeLintResultXml = fs.readFileSync('./cb-artifact/deadcode-lint-result.xml', 'utf8')
            }
            console.log('deadcodeLintResultXml', deadcodeLintResultXml)  
            core.setOutput('deadcodeLintResultXml', deadcodeLintResultXml)

            var errcheckLintResultXml = ''
            if (fs.existsSync('./cb-artifact/errcheck-lint-result.xml')) {
              errcheckLintResultXml = fs.readFileSync('./cb-artifact/errcheck-lint-result.xml', 'utf8')
            }
            console.log('errcheckLintResultXml', errcheckLintResultXml)  
            core.setOutput('errcheckLintResultXml', errcheckLintResultXml) 

            var gofmtLintResultXml = ''
            if (fs.existsSync('./cb-artifact/gofmt-lint-result.xml')) {
              gofmtLintResultXml = fs.readFileSync('./cb-artifact/gofmt-lint-result.xml', 'utf8')
            }
            console.log('gofmtLintResultXml', gofmtLintResultXml)  
            core.setOutput('gofmtLintResultXml', gofmtLintResultXml)   

            var reviveLintResultXml = ''
            if (fs.existsSync('./cb-artifact/revive-lint-result.xml')) {
              reviveLintResultXml = fs.readFileSync('./cb-artifact/revive-lint-result.xml', 'utf8')
            }
            console.log('reviveLintResultXml', reviveLintResultXml)  
            core.setOutput('reviveLintResultXml', reviveLintResultXml)                                                

            var unitTestCheck = 0
            if (fs.existsSync('./cb-artifact/unit-test.check')) {
              unitTestCheck = Number(fs.readFileSync('./cb-artifact/unit-test.check', 'utf8'))
            }
            console.log('unitTestCheck', unitTestCheck)   
            core.setOutput('unitTestCheck', unitTestCheck)   

            var unitTestErr = ''
            if (fs.existsSync('./cb-artifact/unit-test.err')) {
              unitTestErr = fs.readFileSync('./cb-artifact/unit-test.err', 'utf8')
            }
            console.log('unitTestErr', unitTestErr)   
            core.setOutput('unitTestErr', unitTestErr)

            if(unitTestCheck != 0) {
              var report = {}
              report.summary = "Unit Test Error Raised !!!"
              report.text_description = unitTestErr
              core.setOutput('unitTestErrReport', JSON.stringify(report))     
            }               

            var unitTestXml = ''
            if (fs.existsSync('./cb-artifact/unit-tests.xml')) {
              unitTestXml = fs.readFileSync('./cb-artifact/unit-tests.xml', 'utf8')
            }
            console.log('unitTestXml', unitTestXml)  
            core.setOutput('unitTestXml', unitTestXml)  

            var coverageCheck = 0
            if (fs.existsSync('./cb-artifact/coverage.check')) {
              coverageCheck = Number(fs.readFileSync('./cb-artifact/coverage.check', 'utf8'))
            }
            console.log('coverageCheck', coverageCheck)  
            core.setOutput('coverageCheck', coverageCheck)   

            var coverageErr = ''
            if (fs.existsSync('./cb-artifact/coverage.err')) {
              coverageErr = fs.readFileSync('./cb-artifact/coverage.err', 'utf8')
            }
            console.log('coverageErr', coverageErr) 
            core.setOutput('coverageErr', coverageErr)    

            if(coverageCheck != 0) {
              var report = {}
              report.summary = "Coverage Error Raised !!!"
              report.text_description = coverageErr
              core.setOutput('coverageErrReport', JSON.stringify(report))     
            } else {
              var report = {}
              report.summary = "You can check detailed code coverage by clicking on the badge icon to access the codecov site."
              report.text_description = "[![codecov](https://codecov.io/gh/${{ github.repository }}/branch/${{ github.event.repository.default_branch }}/graph/badge.svg)](https://codecov.io/gh/${{ github.repository }})"
              core.setOutput('coverageSuccessReport', JSON.stringify(report))
            }                   

            var coverageTxt = ''
            if (fs.existsSync('./cb-artifact/coverage.txt')) {
              coverageTxt = fs.readFileSync('./cb-artifact/coverage.txt', 'utf8')
            }
            console.log('coverageTxt', coverageTxt) 
            core.setOutput('coverageTxt', coverageTxt)    

            var buildCheck = 0
            if (fs.existsSync('./cb-artifact-1.13/build.check.1.13')) {
              var buildCheckTmp = Number(fs.readFileSync('./cb-artifact-1.13/build.check.1.13', 'utf8'))
              console.log('buildCheck.1.13', buildCheckTmp)   
              if(buildCheckTmp != 0) buildCheck = 1
            }
            if (fs.existsSync('./cb-artifact-1.14/build.check.1.14')) {
              var buildCheckTmp = Number(fs.readFileSync('./cb-artifact-1.14/build.check.1.14', 'utf8'))
              console.log('buildCheck.1.14', buildCheckTmp)   
              if(buildCheckTmp != 0) buildCheck = 1
            }            
            console.log('buildCheck', buildCheck)   
            core.setOutput('buildCheck', buildCheck)   

            var buildErr = ''
            if (fs.existsSync('./cb-artifact-1.13/build.err.1.13')) {
              var buildCheckTmp = Number(fs.readFileSync('./cb-artifact-1.13/build.check.1.13', 'utf8'))
              if(buildCheckTmp == 0) {
                buildErr += '\nGolang 1.13 Build Success\n'
                buildErr += '------------------------------\n'
                buildErr += fs.readFileSync('./cb-artifact-1.13/build.err.1.13', 'utf8')
              } else {
                buildErr += '\nGolang 1.13 Build Error Raised\n'
                buildErr += '------------------------------\n'
                buildErr += fs.readFileSync('./cb-artifact-1.13/build.err.1.13', 'utf8')              
              }
            }
            if (fs.existsSync('./cb-artifact-1.14/build.err.1.14')) {
              var buildCheckTmp = Number(fs.readFileSync('./cb-artifact-1.14/build.check.1.14', 'utf8'))
              if(buildCheckTmp == 0) {
                buildErr += '\nGolang 1.14 Build Success\n'
                buildErr += '------------------------------\n'
                buildErr += fs.readFileSync('./cb-artifact-1.14/build.err.1.14', 'utf8')
              } else {
                buildErr += '\nGolang 1.14 Build Error Raised\n'
                buildErr += '------------------------------\n'
                buildErr += fs.readFileSync('./cb-artifact-1.14/build.err.1.14', 'utf8')           
              }
            }            
            console.log('buildErr', buildErr)   
            core.setOutput('buildErr', buildErr)

            if(buildCheck != 0) {
              var report = {}
              report.summary = "Build Error Raised !!!"
              report.text_description = buildErr
              core.setOutput('buildErrReport', JSON.stringify(report))     
            } else {
              var report = {}
              report.summary = "Build Success !!!"
              report.text_description = ''
              core.setOutput('buildSuccessReport', JSON.stringify(report))                
            }

            var dockerBuildRun = 0
            var dockerBuildCheck = 0
            if (fs.existsSync('./cb-artifact-deploy/dockerbuild.check')) {
              dockerBuildRun = 1
              dockerBuildCheck = Number(fs.readFileSync('./cb-artifact-deploy/dockerbuild.check', 'utf8'))
            }
            console.log('dockerBuildRun', dockerBuildRun)   
            core.setOutput('dockerBuildRun', dockerBuildRun)             
            console.log('dockerBuildCheck', dockerBuildCheck)   
            core.setOutput('dockerBuildCheck', dockerBuildCheck)   

            var dockerBuildErr = ''
            if (fs.existsSync('./cb-artifact-deploy/dockerbuild.err')) {
              dockerBuildErr = fs.readFileSync('./cb-artifact-deploy/dockerbuild.err', 'utf8')
            }
            console.log('dockerBuildErr', dockerBuildErr)   
            core.setOutput('dockerBuildErr', dockerBuildErr)

            if(dockerBuildCheck != 0) {
              var report = {}
              report.summary = "Docker Build Error Raised !!!"
              report.text_description = dockerBuildErr
              core.setOutput('dockerBuildErrReport', JSON.stringify(report))  
            } else {
              var report = {}
              report.summary = "Docker Build Success !!!"
              report.text_description = ''
              core.setOutput('dockerBuildSuccessReport', JSON.stringify(report))
            } 

            var publishRun = 0
            var publishCheck = 0
            if (fs.existsSync('./cb-artifact-deploy/ghcrpublish.check')) {
              publishRun = 1
              var publishCheckTmp = Number(fs.readFileSync('./cb-artifact-deploy/ghcrpublish.check', 'utf8'))
              console.log('ghcrPublishCheck', publishCheckTmp)   
              if(publishCheckTmp != 0) publishCheck = 1
            }
            if (fs.existsSync('./cb-artifact-deploy/dockerpublish.check')) {
              publishRun = 1
              var publishCheckTmp = Number(fs.readFileSync('./cb-artifact-deploy/dockerpublish.check', 'utf8'))
              console.log('dockerPublishCheck', publishCheckTmp)   
              if(publishCheckTmp != 0) publishCheck = 1
            }      
            console.log('publishRun', publishRun)   
            core.setOutput('publishRun', publishRun)                   
            console.log('publishCheck', publishCheck)   
            core.setOutput('publishCheck', publishCheck) 

            var publishErr = ''
            if (fs.existsSync('./cb-artifact-deploy/ghcrpublish.err')) {
              var publishCheckTmp = Number(fs.readFileSync('./cb-artifact-deploy/ghcrpublish.check', 'utf8'))
              if(publishCheckTmp == 0) {
                publishErr += '\nGitHub Container Registry Publish Success\n'
                publishErr += '------------------------------\n'
                publishErr += fs.readFileSync('./cb-artifact-deploy/ghcrpublish.err', 'utf8')
              } else {
                publishErr += '\nGitHub Container Registry Publish Error Raised\n'
                publishErr += '------------------------------\n'
                publishErr += fs.readFileSync('./cb-artifact-deploy/ghcrpublish.err', 'utf8')                
              }
            }
            if (fs.existsSync('./cb-artifact-deploy/dockerpublish.err')) {
              var publishCheckTmp = Number(fs.readFileSync('./cb-artifact-deploy/dockerpublish.check', 'utf8'))
              if(publishCheckTmp == 0) {
                publishErr += '\nDocker Hub Publish Success\n'
                publishErr += '------------------------------\n'
                publishErr += fs.readFileSync('./cb-artifact-deploy/dockerpublish.err', 'utf8')
              } else {
                publishErr += '\nDocker Hub Publish Error Raised\n'
                publishErr += '------------------------------\n'
                publishErr += fs.readFileSync('./cb-artifact-deploy/dockerpublish.err', 'utf8')           
              }
            }            
            console.log('publishErr', publishErr)   
            core.setOutput('publishErr', publishErr)      

            if(publishCheck != 0) {
              var report = {}
              report.summary = "Publish Image Error Raised !!!"
              report.text_description = publishErr
              core.setOutput('publishErrReport', JSON.stringify(report))     
            } else {
              var report = {}
              report.summary = "Publish Image Success !!!"
              report.text_description = ''
              core.setOutput('publishSuccessReport', JSON.stringify(report))                
            }                  

            var summaryReport = '# Summary Result\n'

            deadcodeLintCnt = (deadcodeLintResultXml.match(/source="/g) || []).length
            console.log('deadcodeLintCnt', deadcodeLintCnt) 
            summaryReport += '- deadcode(lint) : ' + deadcodeLintCnt + ' found\n'

            errcheckLintCnt = (errcheckLintResultXml.match(/source="/g) || []).length
            console.log('errcheckLintCnt', errcheckLintCnt) 
            summaryReport += '- errcheck(lint) : ' + errcheckLintCnt + ' found\n'    

            gofmtLintCnt = (gofmtLintResultXml.match(/source="/g) || []).length
            console.log('gofmtLintCnt', gofmtLintCnt) 
            summaryReport += '- gofmt(lint) : ' + gofmtLintCnt + ' found\n'       

            reviveLintCnt = (reviveLintResultXml.match(/source="/g) || []).length
            console.log('reviveLintCnt', reviveLintCnt) 
            summaryReport += '- revive(lint) : ' + reviveLintCnt + ' found\n'                               

            var coverageTotal = '-'
            if (fs.existsSync('./cb-artifact/coverage.total')) {
              coverageTotal = fs.readFileSync('./cb-artifact/coverage.total', 'utf8')
              coverageTotal = coverageTotal.trim()
              if(coverageTotal == '') coverageTotal = '-'
            }
            console.log('coverageTotal', coverageTotal) 
            summaryReport += '- coverage total : ' + coverageTotal + '\n'

            var testCaseAllCnt = 0
            const regexTests = /tests="(.*?)"/g;
            while (current = regexTests.exec(unitTestXml)) {
              testCaseAllCnt += Number(current.pop())
            }
            var testCaseFailCnt = 0
            const regexFailures = /failures="(.*?)"/g;
            while (current = regexFailures.exec(unitTestXml)) {
              testCaseFailCnt += Number(current.pop())
            }
            console.log('testCaseAllCnt', testCaseAllCnt) 
            console.log('testCaseFailCnt', testCaseFailCnt) 
            summaryReport += '- junt test : ' + testCaseAllCnt + ' tests, ' + testCaseFailCnt + ' failure\n'

            if(buildCheck != 0) {
              summaryReport += '- go build : fail\n'
            } else {
              summaryReport += '- go build : success\n'
            }

            if(dockerBuildRun == 1) {
              if(dockerBuildCheck != 0) {
                summaryReport += '- docker build : fail\n'
              } else {
                summaryReport += '- docker build : success\n'
              }   
            } else {
              summaryReport += '- docker build : -\n'
            }

            if(publishRun == 1) {
              if(publishCheck != 0) {
                summaryReport += '- deploy : fail\n'
              } else {
                summaryReport += '- deploy : success\n'
              }   
            } else {
              summaryReport += '- deploy : -\n'
            }       

            console.log('summaryReport', summaryReport)   
            core.setOutput('summaryReport', summaryReport)

      - name: Make Sample Report
        uses: actions/github-script@v3
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            console.log(context)

            var fs = require('fs');

            var report = {}
            report.title = "Report Title !!!"
            report.data = "hello world..."
            report.sha = context.sha

            fs.writeFileSync('./cb-publish/sample.json', JSON.stringify(report), 'utf8');

      - name: Publish generated content to GitHub Pages
        uses: peaceiris/actions-gh-pages@v3
        with:
          personal_token: ${{ secrets.REPO_ACCESS_TOKEN }}
          external_repository: jmleefree/pagetest1
          publish_branch: main
          publish_dir: ./cb-publish
          destination_dir: ./cb-publish/actiontest1
          keep_files: true
          enable_jekyll: false
          full_commit_message: "test result commit"

      - name: Publish Unit Test Results(Success)
        if: ${{ steps.loadResultInfo.outputs.unitTestCheck == 0 }}
        uses: EnricoMi/publish-unit-test-result-action@v1
        with:
          commit: ${{ github.event.workflow_run.head_commit.id }}
          files: ./cb-artifact/unit-tests.xml

      - name: Publish Unit Test Results(Fail)
        if: ${{ steps.loadResultInfo.outputs.unitTestCheck != 0 }}
        uses: LouisBrunner/checks-action@v1.1.1
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          sha: ${{ github.event.workflow_run.head_commit.id }}
          name: Publish Unit Test Results(Fail)
          conclusion: failure
          output: |
            ${{ steps.loadResultInfo.outputs.unitTestErrReport }}

      - name: Upload coverage report(Success)
        if: ${{ steps.loadResultInfo.outputs.coverageCheck == 0 }}
        uses: codecov/codecov-action@v1.3.1
        with:
          token: ${{ secrets.CODECOV_TOKEN }}
          file: ./cb-artifact/coverage.txt
          flags: unittests
          name: codecov-umbrella
          override_commit: ${{ github.event.workflow_run.head_commit.id }}

      - name: Publish Coverage Results(Success)
        if: ${{ steps.loadResultInfo.outputs.coverageCheck == 0 }}
        uses: LouisBrunner/checks-action@v1.1.1
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          sha: ${{ github.event.workflow_run.head_commit.id }}
          name: Publish Coverage Results(Success)
          conclusion: success
          output: |
            ${{ steps.loadResultInfo.outputs.coverageSuccessReport }}

      - name: Publish Coverage Results(Fail)
        if: ${{ steps.loadResultInfo.outputs.coverageCheck != 0 }}
        uses: LouisBrunner/checks-action@v1.1.1
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          sha: ${{ github.event.workflow_run.head_commit.id }}
          name: Publish Coverage Results(Fail)
          conclusion: failure
          output: |
            ${{ steps.loadResultInfo.outputs.coverageErrReport }}

      - name: Go Build Results(Success)
        if: ${{ steps.loadResultInfo.outputs.buildCheck == 0 }}
        uses: LouisBrunner/checks-action@v1.1.1
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          sha: ${{ github.event.workflow_run.head_commit.id }}
          name: Go Build Results(Success)
          conclusion: success
          output: |
            ${{ steps.loadResultInfo.outputs.buildSuccessReport }}

      - name: Go Build Results(Fail)
        if: ${{ steps.loadResultInfo.outputs.buildCheck != 0 }}
        uses: LouisBrunner/checks-action@v1.1.1
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          sha: ${{ github.event.workflow_run.head_commit.id }}
          name: Go Build Results(Fail)
          conclusion: failure
          output: |
            ${{ steps.loadResultInfo.outputs.buildErrReport }}

      - name: Docker Build Results(Success)
        if: ${{ steps.loadResultInfo.outputs.dockerBuildRun == 1 && steps.loadResultInfo.outputs.dockerBuildCheck == 0 }}
        uses: LouisBrunner/checks-action@v1.1.1
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          sha: ${{ github.event.workflow_run.head_commit.id }}
          name: Docker Build Results(Success)
          conclusion: success
          output: |
            ${{ steps.loadResultInfo.outputs.dockerBuildSuccessReport }}

      - name: Docker Build Results(Fail)
        if: ${{ steps.loadResultInfo.outputs.dockerBuildRun == 1 && steps.loadResultInfo.outputs.dockerBuildCheck != 0 }}
        uses: LouisBrunner/checks-action@v1.1.1
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          sha: ${{ github.event.workflow_run.head_commit.id }}
          name: Docker Build Results(Fail)
          conclusion: failure
          output: |
            ${{ steps.loadResultInfo.outputs.dockerBuildErrReport }}

      - name: Publish Image Results(Success)
        if: ${{ steps.loadResultInfo.outputs.publishRun == 1 && steps.loadResultInfo.outputs.publishCheck == 0 }}
        uses: LouisBrunner/checks-action@v1.1.1
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          sha: ${{ github.event.workflow_run.head_commit.id }}
          name: Publish Image Results(Success)
          conclusion: success
          output: |
            ${{ steps.loadResultInfo.outputs.publishSuccessReport }}

      - name: Publish Image Results(Fail)
        if: ${{ steps.loadResultInfo.outputs.publishRun == 1 && steps.loadResultInfo.outputs.publishCheck != 0 }}
        uses: LouisBrunner/checks-action@v1.1.1
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          sha: ${{ github.event.workflow_run.head_commit.id }}
          name: Publish Image Results(Fail)
          conclusion: failure
          output: |
            ${{ steps.loadResultInfo.outputs.publishErrReport }}

      - name: Publish Summary Results(PR)
        if: ${{ github.event.workflow_run.event == 'pull_request' }}
        uses: peter-evans/create-or-update-comment@v1
        with:
          issue-number: ${{ steps.loadResultInfo.outputs.prNumber }}
          body: |
            ${{ steps.loadResultInfo.outputs.summaryReport }}

      - name: Publish Summary Results(Push)
        if: ${{ github.event.workflow_run.event == 'push' }}
        uses: peter-evans/commit-comment@v1
        with:
          body: |
            ${{ steps.loadResultInfo.outputs.summaryReport }}
