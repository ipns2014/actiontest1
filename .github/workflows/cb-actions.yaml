name: CB-CI-ACTIONS-WORKFLOW

on:
  push:
  pull_request:

jobs:
  cb-ci-test-job:
    name: CB-CI-TEST-JOB
    runs-on: ubuntu-latest
    strategy:
      matrix:
        go: ["1.13"]
    steps:
      - name: Check Environment variable
        env:
          GITHUB_CONTEXT: ${{ toJSON(github) }}
          SECRETS: ${{ toJSON(secrets) }}
        run: |
          echo 'workflow starting'

      - uses: actions/checkout@v2

      - name: Make Output Folder
        run: |
          mkdir -p ./outputs

      - name: Setup Go
        uses: actions/setup-go@v2
        with:
          go-version: ${{ matrix.go }}

      - name: Setup golangci-lint
        run: |
          curl -sSfL https://raw.githubusercontent.com/golangci/golangci-lint/master/install.sh | sh -s -- -b $(go env GOPATH)/bin v1.39.0
          golangci-lint --version

      - name: Find PR Number
        id: findPrNumber
        uses: actions/github-script@v3
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            var fs = require('fs');
            var prNumber = '0'

            if(context.eventName == 'pull_request') {
              prNumber = context.payload.number
            } else if(context.eventName == 'push') {
              const result = await github.repos.listPullRequestsAssociatedWithCommit({
                owner: context.repo.owner,
                repo: context.repo.repo,
                commit_sha: context.sha
              })
              const pr = result.data.length > 0 && result.data[0];
              prNumber = pr && pr.number || '0'
            }
            fs.writeFileSync('./outputs/pr_number.txt', prNumber, 'utf8');

      - name: Run Lint
        run: |
          golangci-lint run --config ./.github/.golangci.yaml --disable-all -E deadcode | tee ./outputs/deadcode-lint-result.xml
          golangci-lint run --config ./.github/.golangci.yaml --disable-all -E errcheck | tee ./outputs/errcheck-lint-result.xml
          golangci-lint run --config ./.github/.golangci.yaml --disable-all -E gofmt | tee ./outputs/gofmt-lint-result.xml
          golangci-lint run --config ./.github/.golangci.yaml --disable-all -E revive | tee ./outputs/revive-lint-result.xml

          if [ -f "./outputs/deadcode-lint-result.xml" ] ; then
            echo "======= deadcode-lint-result.xml ======="
            cat ./outputs/deadcode-lint-result.xml
          fi
          if [ -f "./outputs/errcheck-lint-result.xml" ] ; then
            echo "======= errcheck-lint-result.xml ======="
            cat ./outputs/errcheck-lint-result.xml
          fi
          if [ -f "./outputs/gofmt-lint-result.xml" ] ; then
            echo "======= gofmt-lint-result.xml ======="
            cat ./outputs/gofmt-lint-result.xml
          fi  
          if [ -f "./outputs/revive-lint-result.xml" ] ; then
            echo "======= revive-lint-result.xml ======="
            cat ./outputs/revive-lint-result.xml
          fi

      - name: Run Spider Server
        env:
          CBSPIDER_ROOT: "/home/runner/work/cb-spider"
          LOCALHOST: "OFF"
          PLUGIN_SW: "OFF"
          MEERKAT: "OFF"
          CBSTORE_ROOT: "/home/runner/work/cb-spider"
          CBLOG_ROOT: "/home/runner/work/cb-spider"
        run: |
          cd /home/runner/work
          git clone https://github.com/cloud-barista/cb-spider.git
          cd ./cb-spider/api-runtime
          go run apiserver.go > ${{ github.workspace }}/outputs/cb-spider.log 2>&1 &
          cd ${{ github.workspace }}

          timeout 2m sh -c 'until nc -z $0 $1; do sleep 1; done' localhost 2048
          nc -zv localhost 2048

      - name: Run Unit Test
        env:
          CBSTORE_ROOT: ${{ github.workspace }}
          CBLOG_ROOT: ${{ github.workspace }}
        run: |
          go get -u github.com/jstemmer/go-junit-report
          (go test -v ./... > ./outputs/unit-test.err 2>&1; echo $? > ./outputs/unit-test.check ) || true
          cat ./outputs/unit-test.err | go-junit-report > ./outputs/unit-tests.xml
          if [ -f "./outputs/unit-test.check" ] ; then
            echo "======= unit-test.check ======="
            cat ./outputs/unit-test.check
          fi    
          if [ -f "./outputs/unit-test.err" ] ; then
            echo "======= unit-test.err ======="
            cat ./outputs/unit-test.err
          fi   
          if [ -f "./outputs/unit-tests.xml" ] ; then
            echo "======= unit-tests.xml ======="
            cat ./outputs/unit-tests.xml
          fi

      - name: Run Coverage
        run: |
          (go test -v -covermode=count -coverprofile=./outputs/coverage.txt > ./outputs/coverage.err 2>&1; echo $? > ./outputs/coverage.check ) || true
          if [ -f "./outputs/coverage.check" ] ; then
            echo "======= coverage.check ======="
            cat ./outputs/coverage.check
          fi    
          if [ -f "./outputs/coverage.err" ] ; then
            echo "======= coverage.err ======="
            cat ./outputs/coverage.err
          fi   
          if [ -f "./outputs/coverage.txt" ] ; then
            echo "======= coverage.txt ======="
            cat ./outputs/coverage.txt
          fi

          (go tool cover -func ./outputs/coverage.txt | grep total | awk '{print $3}' > ./outputs/coverage.total) || true

      - name: Upload Result
        uses: actions/upload-artifact@v2
        with:
          name: cb-artifact
          path: outputs/

  cb-ci-build-job:
    name: CB-CI-BUILD-JOB
    runs-on: ubuntu-latest
    strategy:
      matrix:
        go: ["1.14", "1.13"]
    outputs:
      build_1_13: ${{ steps.build.outputs.build_1_13 }}
      build_1_14: ${{ steps.build.outputs.build_1_14 }}
    steps:
      - name: Check Environment variable
        env:
          GITHUB_CONTEXT: ${{ toJSON(github) }}
          SECRETS: ${{ toJSON(secrets) }}
        run: |
          echo 'workflow starting'

      - uses: actions/checkout@v2

      - name: Make Output Folder
        run: |
          mkdir -p ./outputs

      - name: Setup Go
        uses: actions/setup-go@v2
        with:
          go-version: ${{ matrix.go }}

      - name: Run Build
        id: build
        run: |
          (go build -o test > ./outputs/build.err.${{ matrix.go }} 2>&1; echo $? > ./outputs/build.check.${{ matrix.go }} ) || true
          if [ -f "./outputs/build.check.${{ matrix.go }}" ] ; then
            echo "======= build.check.${{ matrix.go }} ======="
            cat ./outputs/build.check.${{ matrix.go }}
          fi    
          if [ -f "./outputs/build.err.${{ matrix.go }}" ] ; then
            echo "======= build.err.${{ matrix.go }} ======="
            cat ./outputs/build.err.${{ matrix.go }}
          fi

          buildCheck=`cat ./outputs/build.check.${{ matrix.go }}`
          if [ ${{ matrix.go }} == "1.13" ]; then
              echo "Golang ${{ matrix.go }} Build Error !!!"
              echo "::set-output name=build_1_13::${buildCheck}"
          fi
          if [ ${{ matrix.go }} == "1.14" ]; then
              echo "Golang ${{ matrix.go }} Build Error !!!"
              echo "::set-output name=build_1_14::${buildCheck}"
          fi

      - name: Upload Result
        uses: actions/upload-artifact@v2
        with:
          name: cb-artifact-${{ matrix.go }}
          path: outputs/

  cb-ci-deploy-job:
    name: CB-CI-DEPLOY-JOB
    if: ${{ github.event_name == 'push' }}
    runs-on: ubuntu-latest
    needs: [cb-ci-build-job]
    strategy:
      matrix:
        go: ["1.13"]
    env:
      DOCKER_REPO: jmleefree
      IMAGE_NAME: actiontest1
    steps:
      - name: Check Environment variable
        env:
          GITHUB_CONTEXT: ${{ toJSON(github) }}
          SECRETS: ${{ toJSON(secrets) }}
          OUTPUTS: ${{ toJSON(needs.cb-ci-build-job.outputs) }}
        run: |
          echo 'workflow starting'

      - uses: actions/checkout@v2

      - name: Make Output Folder
        run: |
          mkdir -p ./outputs

      - name: Prepare Tags
        id: prep
        run: |
          VERSION=latest
          if [[ $GITHUB_REF == refs/tags/* ]]; then
            VERSION=${GITHUB_REF#refs/tags/v}
          fi

          DOCKER_IMAGE=$DOCKER_REPO/$IMAGE_NAME
          DOCKER_TAGS="${DOCKER_IMAGE}:${VERSION}"
          if [[ $VERSION =~ ^v[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}.*$ ]]; then
            DOCKER_TAGS="$DOCKER_TAGS,${DOCKER_IMAGE}:latest"
          fi
          echo ::set-output name=docker-tags::${DOCKER_TAGS}
          echo ${DOCKER_TAGS}
          GHCR_IMAGE=ghcr.io/${{ github.repository_owner }}/$IMAGE_NAME
          GHCR_TAGS="${GHCR_IMAGE}:${VERSION}"
          if [[ $VERSION =~ ^v[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}.*$ ]]; then
            GHCR_TAGS="$GHCR_TAGS,${GHCR_IMAGE}:latest"
          fi
          echo ::set-output name=ghcr-tags::${GHCR_TAGS}
          echo ${GHCR_TAGS}

      - name: Build Image Test
        id: imgbuild
        run: |
          (docker build . --file Dockerfile --tag $IMAGE_NAME > ./outputs/dockerbuild.err 2>&1; echo $? > ./outputs/dockerbuild.check ) || true
          if [ -f "./outputs/dockerbuild.check" ] ; then
            echo "======= dockerbuild.check ======="
            cat ./outputs/dockerbuild.check
          fi    
          if [ -f "./outputs/dockerbuild.err" ] ; then
            echo "======= dockerbuild.err ======="
            cat ./outputs/dockerbuild.err
          fi

          dockerBuildCheck=`cat ./outputs/dockerbuild.check`
          echo "::set-output name=docker_build_check::${dockerBuildCheck}"

      - name: Upload Result
        if: ${{ steps.imgbuild.outputs.docker_build_check != 0 }}
        uses: actions/upload-artifact@v2
        with:
          name: cb-artifact-deploy
          path: outputs/

      - name: Step Stop
        if: ${{ steps.imgbuild.outputs.docker_build_check != 0 }}
        run: |
          exit 1

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v1
        with:
          platforms: all

      - name: Set up Docker Buildx
        id: buildx
        uses: docker/setup-buildx-action@v1

      - name: Cache Docker layers
        uses: actions/cache@v2.1.4
        with:
          path: /tmp/.buildx-cache
          key: ${{ runner.os }}-buildx-${{ github.sha }}
          restore-keys: |
            ${{ runner.os }}-buildx-

      #- name: Login to Docker Hub
      #  uses: docker/login-action@v1
      #  with:
      #    username: ${{ secrets.DOCKER_USERNAME }}
      #    password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Login to GitHub Container Registry
        uses: docker/login-action@v1
        with:
          registry: ghcr.io
          username: ${{ github.repository_owner }}
          password: ${{ secrets.CR_PAT }}

      - name: Build and publish
        id: imgpublish
        uses: docker/build-push-action@v2
        with:
          builder: ${{ steps.buildx.outputs.name }}
          context: ./
          file: ./Dockerfile
          target: prod
          platforms: linux/amd64 # linux/arm/v7,linux/arm64,linux/386,linux/ppc64le,linux/s390x,linux/arm/v6
          push: true
          tags: |
            ${{ steps.prep.outputs.docker-tags }}
            ${{ steps.prep.outputs.ghcr-tags }}
          cache-from: type=local,src=/tmp/.buildx-cache
          cache-to: type=local,dest=/tmp/.buildx-cache

      - name: Publish Image Check
        id: imgcheck
        run: |
          docker image inspect ${{ steps.prep.outputs.ghcr-tags }}
          docker image inspect test111
          echo "::set-output name=docker_publish_check::0"

      - name: Upload Result
        if: ${{ steps.imgcheck.outputs.docker_publish_check != 0 }}
        uses: actions/upload-artifact@v2
        with:
          name: cb-artifact-deploy
          path: outputs/

      - name: Step Stop
        if: ${{ steps.imgcheck.outputs.docker_publish_check != 0 }}
        run: |
          exit 1
