name: CB-CI-ACTIONS-WORKFLOW

on:
  push:
  pull_request:

jobs:
  cb-ci-test-job:
    name: CB-CI-TEST-JOB
    runs-on: ubuntu-latest
    strategy:
      matrix:
        go: ["1.13"]
    steps:
      - name: Check Environment variable
        env:
          GITHUB_CONTEXT: ${{ toJSON(github) }}
          SECRETS: ${{ toJSON(secrets) }}
        run: |
          echo 'workflow starting'

      - uses: actions/checkout@v2

      - name: Make Output Folder
        run: |
          mkdir -p ./outputs

      - name: Setup Go
        uses: actions/setup-go@v2
        with:
          go-version: ${{ matrix.go }}

      - name: Setup golangci-lint
        run: |
          curl -sSfL https://raw.githubusercontent.com/golangci/golangci-lint/master/install.sh | sh -s -- -b $(go env GOPATH)/bin v1.39.0
          golangci-lint --version

      - name: Find PR Number
        id: findPrNumber
        uses: actions/github-script@v3
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            var fs = require('fs');
            var prNumber = '0'

            if(context.eventName == 'pull_request') {
              prNumber = context.payload.number
            } else if(context.eventName == 'push') {
              const result = await github.repos.listPullRequestsAssociatedWithCommit({
                owner: context.repo.owner,
                repo: context.repo.repo,
                commit_sha: context.sha
              })
              const pr = result.data.length > 0 && result.data[0];
              prNumber = pr && pr.number || '0'
            }
            fs.writeFileSync('./outputs/pr_number.txt', prNumber, 'utf8');

      - name: Run Lint
        run: |
          golangci-lint run --config ./.github/.golangci.yaml --disable-all -E deadcode | tee ./outputs/deadcode-lint-result.xml
          golangci-lint run --config ./.github/.golangci.yaml --disable-all -E errcheck | tee ./outputs/errcheck-lint-result.xml
          golangci-lint run --config ./.github/.golangci.yaml --disable-all -E gofmt | tee ./outputs/gofmt-lint-result.xml
          golangci-lint run --config ./.github/.golangci.yaml --disable-all -E revive | tee ./outputs/revive-lint-result.xml

          if [ -f "./outputs/deadcode-lint-result.xml" ] ; then
            echo "======= deadcode-lint-result.xml ======="
            cat ./outputs/deadcode-lint-result.xml
          fi
          if [ -f "./outputs/errcheck-lint-result.xml" ] ; then
            echo "======= errcheck-lint-result.xml ======="
            cat ./outputs/errcheck-lint-result.xml
          fi
          if [ -f "./outputs/gofmt-lint-result.xml" ] ; then
            echo "======= gofmt-lint-result.xml ======="
            cat ./outputs/gofmt-lint-result.xml
          fi  
          if [ -f "./outputs/revive-lint-result.xml" ] ; then
            echo "======= revive-lint-result.xml ======="
            cat ./outputs/revive-lint-result.xml
          fi

      - name: Run Spider Server
        run: |
          cd /home/runner/work
          git clone https://github.com/cloud-barista/cb-spider.git

          export CBSPIDER_ROOT=/home/runner/work/cb-spider
          export LOCALHOST=OFF
          export PLUGIN_SW=OFF
          export MEERKAT=OFF
          export CBSTORE_ROOT=$CBSPIDER_ROOT
          export CBLOG_ROOT=$CBSPIDER_ROOT

          cd ./cb-spider/api-runtime
          go run apiserver.go &
          cd ${{ github.workspace }}

      - name: Run Unit Test
        run: |
          pwd

          export CBSTORE_ROOT=${{ github.workspace }}
          export CBLOG_ROOT=${{ github.workspace }}

          env

          go get gotest.tools/gotestsum
          (gotestsum --junitfile ./outputs/unit-tests.xml 2> ./outputs/unit-test.err; echo $? > ./outputs/unit-test.check ) || true
          if [ -f "./outputs/unit-test.check" ] ; then
            echo "======= unit-test.check ======="
            cat ./outputs/unit-test.check
          fi    
          if [ -f "./outputs/unit-test.err" ] ; then
            echo "======= unit-test.err ======="
            cat ./outputs/unit-test.err
          fi   
          if [ -f "./outputs/unit-tests.xml" ] ; then
            echo "======= unit-tests.xml ======="
            cat ./outputs/unit-tests.xml
          fi

      - name: Run Coverage
        run: |
          (go test -v -covermode=count -coverprofile=./outputs/coverage.txt 2> ./outputs/coverage.err; echo $? > ./outputs/coverage.check ) || true
          if [ -f "./outputs/coverage.check" ] ; then
            echo "======= coverage.check ======="
            cat ./outputs/coverage.check
          fi    
          if [ -f "./outputs/coverage.err" ] ; then
            echo "======= coverage.err ======="
            cat ./outputs/coverage.err
          fi   
          if [ -f "./outputs/coverage.txt" ] ; then
            echo "======= coverage.txt ======="
            cat ./outputs/coverage.txt
          fi

          (go tool cover -func ./outputs/coverage.txt | grep total | awk '{print $3}' > ./outputs/coverage.total) || true

      - name: Upload Result
        uses: actions/upload-artifact@v2
        with:
          name: cb-artifact
          path: outputs/

  cb-ci-build-job:
    name: CB-CI-BUILD-JOB
    runs-on: ubuntu-latest
    strategy:
      matrix:
        go: ["1.14", "1.13"]
    outputs:
      build_1_13: ${{ steps.build.outputs.build_1_13 }}
      build_1_14: ${{ steps.build.outputs.build_1_14 }}
    steps:
      - name: Check Environment variable
        env:
          GITHUB_CONTEXT: ${{ toJSON(github) }}
          SECRETS: ${{ toJSON(secrets) }}
        run: |
          echo 'workflow starting'

      - uses: actions/checkout@v2

      - name: Make Output Folder
        run: |
          mkdir -p ./outputs

      - name: Setup Go
        uses: actions/setup-go@v2
        with:
          go-version: ${{ matrix.go }}

      - name: Run Build
        id: build
        run: |
          (go build -o test 2> ./outputs/build.err.${{ matrix.go }}; echo $? > ./outputs/build.check.${{ matrix.go }} ) || true
          if [ -f "./outputs/build.check.${{ matrix.go }}" ] ; then
            echo "======= build.check.${{ matrix.go }} ======="
            cat ./outputs/build.check.${{ matrix.go }}
          fi    
          if [ -f "./outputs/build.err.${{ matrix.go }}" ] ; then
            echo "======= build.err.${{ matrix.go }} ======="
            cat ./outputs/build.err.${{ matrix.go }}
          fi

          buildCheck=`cat ./outputs/build.check.${{ matrix.go }}`
          if [ ${{ matrix.go }} == "1.13" ]; then
              echo "Golang ${{ matrix.go }} Build Error !!!"
              echo "::set-output name=build_1_13::${buildCheck}"
          fi
          if [ ${{ matrix.go }} == "1.14" ]; then
              echo "Golang ${{ matrix.go }} Build Error !!!"
              echo "::set-output name=build_1_14::${buildCheck}"
          fi

      - name: Upload Result
        uses: actions/upload-artifact@v2
        with:
          name: cb-artifact-${{ matrix.go }}
          path: outputs/

  cb-ci-deploy-job:
    name: CB-CI-DEPLOY-JOB
    if: ${{ github.event_name == 'push' }}
    runs-on: ubuntu-latest
    needs: [cb-ci-build-job]
    strategy:
      matrix:
        go: ["1.13"]
    steps:
      - name: Check Environment variable
        env:
          GITHUB_CONTEXT: ${{ toJSON(github) }}
          SECRETS: ${{ toJSON(secrets) }}
          OUTPUTS: ${{ toJSON(needs.cb-ci-build-job.outputs) }}
        run: |
          echo 'workflow starting'
