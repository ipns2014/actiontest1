name: CB-CI-ACTIONS-WORKFLOW

on:
  push:
  pull_request:

jobs:
  cb-ci-actions-job:
    name: CB-CI-ACTIONS-JOB
    runs-on: ubuntu-latest
    strategy:
      matrix:
        go: ["1.13"]
    steps:
      - name: Check Environment variable
        env:
          GITHUB_CONTEXT: ${{ toJSON(github) }}
          SECRETS: ${{ toJSON(secrets) }}
        run: |
          echo 'workflow starting'

      - uses: actions/checkout@v2

      - name: Make Output Folder
        run: |
          mkdir -p ./outputs

      - name: Setup Go
        uses: actions/setup-go@v2
        with:
          go-version: ${{ matrix.go }}

      - name: Setup golangci-lint
        run: |
          curl -sSfL https://raw.githubusercontent.com/golangci/golangci-lint/master/install.sh | sh -s -- -b $(go env GOPATH)/bin v1.39.0
          golangci-lint --version

      - name: Find PR Number
        id: findPrNumber
        uses: actions/github-script@v3
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            if(context.eventName == 'pull_request') {
              core.setOutput('pr', context.payload.number)
            } else if(context.eventName == 'push') {
              const result = await github.repos.listPullRequestsAssociatedWithCommit({
                owner: context.repo.owner,
                repo: context.repo.repo,
                commit_sha: context.sha
              })
              const pr = result.data.length > 0 && result.data[0];
              core.setOutput('pr', pr && pr.number || '');     
            } else {
              core.setOutput('pr', '')
            }

      - name: Save PR number
        env:
          PR: ${{ steps.findPrNumber.outputs.pr }}
        run: |
          echo ${PR} > ./outputs/pr_number.txt

      - name: Run Lint
        run: |
          golangci-lint run --config ./.github/.golangci.yaml | tee ./outputs/lint-result.xml
          if [ -f "./outputs/lint-result.xml" ] ; then
            echo "======= lint-result.xml ======="
            cat ./outputs/lint-result.xml
          fi

      - name: Run Test
        run: |
          go get gotest.tools/gotestsum
          (gotestsum --junitfile ./outputs/unit-tests.xml 2> ./outputs/unit-test.err; echo $? > ./outputs/unit-test.check ) || true
          if [ -f "./outputs/unit-test.check" ] ; then
            echo "======= unit-test.check ======="
            cat ./outputs/unit-test.check
          fi    
          if [ -f "./outputs/unit-test.err" ] ; then
            echo "======= unit-test.err ======="
            cat ./outputs/unit-test.err
          fi   
          if [ -f "./outputs/unit-tests.xml" ] ; then
            echo "======= unit-tests.xml ======="
            cat ./outputs/unit-tests.xml
          fi

      - name: Run Coverage
        run: |
          (go test -v -covermode=count -coverprofile=./outputs/coverage.txt 2> ./outputs/coverage.err; echo $? > ./outputs/coverage.check ) || true
          if [ -f "./outputs/coverage.check" ] ; then
            echo "======= coverage.check ======="
            cat ./outputs/coverage.check
          fi    
          if [ -f "./outputs/coverage.err" ] ; then
            echo "======= coverage.err ======="
            cat ./outputs/coverage.err
          fi   
          if [ -f "./outputs/coverage.txt" ] ; then
            echo "======= coverage.txt ======="
            cat ./outputs/coverage.txt
          fi

      - name: Run Build
        run: |
          (go build -o test 2> ./outputs/build.err; echo $? > ./outputs/build.check ) || true
          if [ -f "./outputs/build.check" ] ; then
            echo "======= build.check ======="
            cat ./outputs/build.check
          fi    
          if [ -f "./outputs/build.err" ] ; then
            echo "======= build.err ======="
            cat ./outputs/build.err
          fi

      - name: Upload Result
        uses: actions/upload-artifact@v2
        with:
          name: cb-actions-artifact
          path: outputs/
